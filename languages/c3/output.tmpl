
///START MODULE {{.Namespace}}
module {{.Namespace}};
{{range $inc := .Includes}}
import {{$inc}};
{{end}}
{{range $enum := .Enums}}
distinct {{$enum.Name | sanClassName}} = {{$enum.Type}};
{{- range $key, $val := $enum.Set}}
const {{$enum.Name | sanClassName}} {{$enum.Group}}_{{$key}} = {{$val}};
{{- end}}
{{end}}
{{range $union := .Unions}}
union {{$union.Name}} {
{{- range $field := $union.Fields}}
    {{$field.Type | sanClassName}}{{if $field.IsPointer}}*{{end}} {{$field.Name}};
{{- end}}
}
{{end}}
{{range $struct := .Structs}}
distinct {{$struct | sanClassName}} = void*;
{{end}}
{{range $cb := .CallbackAliases}}
def {{$cb.Name}} = fn {{if $cb.Return -}}
{{- $cb.Return.PrintType -}}
{{- else -}}
  void
{{- end}}({{range $idx, $param := $cb.Params -}}{{if not (eq $idx 0)}}, {{end}}{{$param.PrintType | sanClassName}} {{$param.Name}}{{- end}});
{{end}}
{{range $class := .Classes}}
<* Maps to {{$class.ExternRef}} *>
distinct {{$class.ClassName | sanClassName}} = void*;

// Class to parent cast.
{{if not (eq $class.Parent "") -}}
fn {{$class.Parent | sanClassName}}* {{$class.ClassName | sanClassName}}.as_{{$class.Parent | moduleToUnderscore}}(&self) => ({{$class.Parent | sanClassName}}*)(self);
{{- end}}

// Class Constructors
{{range $method := $class.Constructors}}
<* Maps to {{$method.Name}} of {{$class.ClassName}} *>
extern fn {{if $method.Return -}}
{{- $method.Return.PrintType | sanClassName -}}
{{- else -}}
  void
{{- end}} {{$class.ClassName | snake}}_{{$method.Name}}({{range $idx, $param := $method.Params -}}{{if not (eq $idx 0)}}, {{end}}{{$param.PrintType | sanClassName}} {{$param.Name}}{{- end}}) @extern("{{$method.ExternRef}}");
{{end}}


// Class Methods
{{range $method := $class.Methods}}
<* Maps to {{$class.ClassName}}::{{$method.Name}} *>
extern fn {{if $method.Return -}}
{{- $method.Return.PrintType | sanClassName -}}
{{- else -}}
  void
{{- end}} {{$class.ClassName | sanClassName}}.{{$method.Name}}(
  {{- if $method.InstanceParam -}}
    {{- if $method.InstanceParam.IsPointer -}}&{{end}}self{{", "}}
  {{- end}}{{range $idx, $param := $method.Params -}}{{if not (eq $idx 0)}}, {{end}}{{$param.PrintType | sanClassName}} {{$param.Name}}{{- end}}) @extern("{{$method.ExternRef}}");
{{end}}

// Class Functions
{{range $method := $class.Functions}}
<* Maps to {{$method.Name}} of {{$class.ClassName}} *>
extern fn {{if $method.Return -}}
{{- $method.Return.PrintType | sanClassName -}}
{{- else -}}
  void
{{- end}} {{$class.ClassName | snake}}_{{$method.Name}}({{range $idx, $param := $method.Params -}}{{if not (eq $idx 0)}}, {{end}}{{$param.PrintType | sanClassName}} {{$param.Name}}{{- end}}) @extern("{{$method.ExternRef}}");
{{end}}

{{end}}

{{range $iface := .Interfaces}}
<* Maps to {{$iface.ExternRef}} *>
interface {{$iface.InterfaceName}} {
{{range $method := $iface.Methods}}
  fn {{if $method.Return -}}
{{- $method.Return.PrintType | sanClassName -}}
{{- else -}}
  void
{{- end}} {{$method.Name}}({{range $idx, $param := $method.Params -}}{{if not (eq $idx 0)}}, {{end}}{{$param.PrintType | sanClassName}} {{$param.Name}}{{- end}});
{{end}}
}
{{end}}
{{range $fn := .Functions}}
<* Maps to {{$fn.Name}} *>
extern fn {{if $fn.Return -}}
{{- $fn.Return.PrintType | sanClassName -}}
{{- else -}}
  void
{{- end}} {{$fn.Name}}({{range $idx, $param := $fn.Params -}}{{if not (eq $idx 0)}}, {{end}}{{$param.PrintType | sanClassName}} {{$param.Name}}{{- end}}) @extern("{{$fn.ExternRef}}");
{{end}}
///END MODULE {{.Namespace}}
